@startuml updateUser

actor User
participant "UserServiceImpl" as UserService
participant "UserRepository" as Repository
participant "PasswordEncoder" as PasswordEncoder

== Update User ==
User -> UserService: update(dto, id)
activate UserService

UserService -> Repository: findById(id)
activate Repository
Repository --> UserService: User (existingUser)
deactivate Repository

UserService -> UserService: Check if dto fields are not null and update
UserService -> UserService: updateIfPresent(dto.getName(), existingUser::setName)
UserService -> UserService: updateIfPresent(dto.getEmail(), existingUser::setEmail)
UserService -> UserService: updateIfPresent(dto.getPassword(), passwordEncoder.encode(password))
UserService -> UserService: updateIfPresent(dto.getAvatar(), existingUser::setAvatar)
UserService -> UserService: updateIfPresent(dto.getContentMotivation(), existingUser::setContentMotivation)

alt Status and Role handling
    UserService -> UserService: Update status and role if not null
end

alt Level and Start/End Date handling
    UserService -> UserService: Set level, start date, and end date if not null
end

UserService -> Repository: save(existingUser)
activate Repository
Repository --> UserService: Saved User
deactivate Repository

UserService -> UserService: convertToDTO(existingUser)
UserService --> User: Updated UserDTO
deactivate UserService

@enduml
