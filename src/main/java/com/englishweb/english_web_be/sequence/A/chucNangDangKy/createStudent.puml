@startuml createStudent

actor User
participant "UserService" as UserService
participant "UserRepository" as Repository
participant "PasswordEncoder" as PasswordEncoder
participant "BaseService" as BaseService
participant "UserDTO" as UserDTO

== Create Student User ==
User -> UserService: createStudent(dto)
activate UserService

UserService -> Repository: findByEmail(dto.getEmail())
activate Repository
Repository --> UserService: Optional<User>
deactivate Repository

alt Email already exists
    UserService -> UserService: throw RuntimeException("Email already exists.")
else Email does not exist
    UserService -> PasswordEncoder: encode(dto.getPassword())
    activate PasswordEncoder
    PasswordEncoder --> UserService: Encoded Password
    deactivate PasswordEncoder

    UserService -> UserDTO: setStatus(StatusEnum.ACTIVE)
    UserService -> UserDTO: setRole(RoleEnum.STUDENT)

    UserService -> BaseService: create(dto) << Inherited from Parent >>
    activate BaseService
    BaseService --> UserService: UserDTO
    deactivate BaseService

    UserService --> User: UserDTO
end

deactivate UserService

@enduml
